SELECT ST_LengthSpheroid(
ST_GeomFromText('LINESTRING(-95.40 29.77,72.82 19.07)'),
'SPHEROID[\"GRS_1980\",6378137,298.257222101]'
);
"  #need to specify the spheroid
dbGetQuery(con,q)
#decomposition functions
#bounding box
q<-"
SELECT name, Box2D(geom) as box2d, Box3D(geom) as box3d
FROM (
VALUES
('2D Line', ST_GeomFromText('LINESTRING(121.63 25.03, 3.03 6.58, -71.06 42.36)',4326)),
('3D Line', ST_GeomFromText('LINESTRING(1 2 3, 3 4 1000.34567)')),
('Vert 2D Line', ST_GeomFromText('LINESTRING(1 2,1 4)')),
('Point', ST_GeomFromText('POINT(1 2)')),
('Polygon', ST_GeomFromText('POLYGON((1 2,3 4,5 6,1 2))'))
) as x(name,geom);
"
dbGetQuery(con,q)
#boundaries and converting polygons to linestrings
q<-"
SELECT object_name, ST_AsText(ST_Boundary(geom)) as wkt
FROM (
VALUES
('Simple linestring',ST_GeomFromText('LINESTRING(-14 21,0 0, 35 26)')),
('Non-simple linestirng',ST_GeomFromText('LINESTRING(2 0,0 0,1 1,1 -1)')),
('Closed linestring',ST_GeomFromText('LINESTRING(52 218,139 82,262 207,245 261,207 267,153 207,125 235,90 270,55 244,51 219,52 218)')),
('Polygon',ST_GeomFromText('POLYGON((52 218, 139 82,262 207,245 261,207 267,153 207,125 235,90 270,55 244,51 219,52 218))')),
('Polygon with holes',ST_GeomFromText('POLYGON((-0.25 -1.25,-0.25 1.25,2.5 1.25,2.5 -1.25,-0.25 -1.25),(2.25 0,1.25 1,1.25 -1,2.25 0),(1 -1,1 1,0 0,1 -1))'))
) as x(object_name, geom);
"
dbGetQuery(con,q)
#centroid and point on surface
q<-"
SELECT name, ST_AsEWKT(ST_Centroid(geom)) as centroid, ST_AsEWKT(ST_PointOnSurface(geom)) as point_on_surface
FROM (
VALUES
('Multipoint',ST_GeomFromText('MULTIPOINT(-1 1,0 0,2 3)')),
('Multipoint 3D',ST_GeomFromText('MULTIPOINT(-1 1 1,0 0 2,2 3 1)')),
('Multilinestring',ST_GeomFromText('MULTILINESTRING((0 0,0 1,1 1),(-1 1,-1 -1))')),
('Polygon with holes',ST_GeomFromText('POLYGON((-0.25 -1.25,-0.25 1.25,2.5 1.25,2.5 -1.25,-0.25 -1.25),(2.25 0,1.25 1,1.25 -1,2.25 0),(1 -1,1 1,0 0,1 -1))'))
) as x(name,geom);
"
dbGetQuery(con,q)
#returning points defining a geometry
q<-"
SELECT ST_AsText(
ST_PointN(ST_GeomFromText('LINESTRING(1 2,3 4,5 8)'),2)
);
"
dbGetQuery(con,q)
#composition functions
#making points
q<-"
SELECT whale,ST_AsEWKT(geom) as spot
FROM (
VALUES
('Mr. Whale',ST_SetSRID(ST_Point(-100.499,28.7015),4326)),
('Mr. Whale with M as time',ST_SetSRID(ST_MakePointM(-100.499,28.7015,5),4326)),
('Mr. Whale with Z as depth',ST_SetSRID(ST_MakePoint(-100.499,28.7015,0.5),4326)),
('Mr. Whale with M and Z',ST_SetSRID(ST_MakePoint(-100.499,28.7015,0.5,5),4326))
) as x(whale,geom);
"
dbGetQuery(con,q)
#geometry relationships
#relating two geometries
#segmenting a linestring with a polygon
q<-"
SELECT
ST_Intersects(g.geom1, g.geom2) as intersect,
GeometryType(ST_Intersection(g.geom1,g.geom2)) as intersection_type,
ST_AsEWKT(ST_Intersection(g.geom1,g.geom2)) as intersection
FROM (
SELECT
ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') as geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84, -0.8 0.59)') as geom2
) as g;
"
dbGetQuery(con,q)
#contains and within
q<-"
SELECT
ST_Contains(geom1,geom2) as geom1_co_geom2,
ST_Within(geom1,geom2) as geom1_wi_geom2
FROM (
SELECT
ST_GeomFromText('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))') as geom1,
ST_GeomFromText('LINESTRING(0.25 0.25, 0.75 0.75)') as geom2
) as g;
"
dbGetQuery(con,q)
#covers and covered by
q<-"
SELECT
ST_Contains(geom1,geom2) as geom1_cot_geom2,
ST_Covers(geom1,geom2) as geom1_cov_geom2
FROM (
SELECT
ST_GeomFromText('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))') as geom1,
ST_GeomFromText('LINESTRING(0 0, 1 0)') as geom2
) as g;
"
dbGetQuery(con,q)
#equality
q<-"
SELECT
name,
ST_OrderingEquals(geom,geom) as g_oeq_g,
ST_OrderingEquals(geom,ST_Reverse(geom)) as g_oeq_rev,
ST_OrderingEquals(geom, ST_Multi(geom)) as g_oeq_m,
ST_Equals(geom, geom) as g_seq_g,
ST_Equals(geom, ST_Multi(geom)) as g_seq_m
FROM (
VALUES
('A 2D linestring', ST_GeomFromText('LINESTRING(3 5,2 4,2 5)')),
('A point', ST_GeomFromText('POINT(2 5)')),
('A triangle', ST_GeomFromText('POLYGON((3 5,2.5 4.5, 2 5,3 5))')),
('An invalid polygon',ST_GeomFromText('POLYGON((2 0,0 0,1 1,1 -1,2 0))'))
) as x(name,geom);
"
dbGetQuery(con,q)
#airports within 10km of gainesville
q<-"
SELECT name, iso_country, iso_region
FROM wk4.airports
WHERE ST_DWithin(geog,ST_Point(-82.3248,29.6516)::geography,10000);
"
dbGetQuery(con,q)
#N closest airports
q<-"
SELECT ident, name, iso_country, iso_region
FROM wk4.airports
CROSS JOIN
(SELECT ST_Point(-82.3248,29.6516)::geography AS ref_geog) AS r
WHERE ST_DWithin(geog,ref_geog,10000)
ORDER BY ST_Distance(geog,ref_geog)
LIMIT 5;
"
dbGetQuery(con,q)
#find closest location
q<-"
SELECT DISTINCT ON (a.ident)
a.ident, a.name AS airport, n.name AS closest_navaid, (ST_Distance(a.geog,n.geog)/1000)::integer AS dist_km
FROM wk4.airports AS a
LEFT JOIN wk4.navaids AS n ON ST_DWithin(a.geog, n.geog, 100000)
ORDER BY a.ident, dist_km;
"
head(dbGetQuery(con,q)) #ORDER BY ensures the navaid selected for output for each airport is the closest to that airport. Radius is specified in ST_DWithin, the wider, the slower the query.
#airports within 10km of gainesville
q<-"
SELECT name, iso_country, iso_region
FROM wk4.airports
WHERE ST_DWithin(geog,ST_Point(-82.3248,29.6516)::geography,10000);
"
dbGetQuery(con,q)
#airports within 10km of gainesville
q<-"
SELECT name, iso_country, iso_region
FROM wk4.airports
WHERE ST_DWithin(geog,ST_Point(-82.3248,29.6516)::geography,10000);
"
dbGetQuery(con,q)
#airports within 10km of gainesville
q<-"
SELECT name, iso_country, iso_region
FROM wk4.airports
WHERE ST_DWithin(geog,ST_Point(-82.3248,29.6516)::geography,10000);
"
dbGetQuery(con,q)
#N closest airports
q<-"
SELECT ident, name, iso_country, iso_region
FROM wk4.airports
CROSS JOIN
(SELECT ST_Point(-82.3248,29.6516)::geography AS ref_geog) AS r
WHERE ST_DWithin(geog,ref_geog,10000)
ORDER BY ST_Distance(geog,ref_geog)
LIMIT 5;
"
dbGetQuery(con,q)
#find closest location
q<-"
SELECT DISTINCT ON (a.ident)
a.ident, a.name AS airport, n.name AS closest_navaid, (ST_Distance(a.geog,n.geog)/1000)::integer AS dist_km
FROM wk4.airports AS a
LEFT JOIN wk4.navaids AS n ON ST_DWithin(a.geog, n.geog, 100000)
ORDER BY a.ident, dist_km;
"
head(dbGetQuery(con,q)) #ORDER BY ensures the navaid selected for output for each airport is the closest to that airport. Radius is specified in ST_DWithin, the wider, the slower the query.
#intersection with tolerance
q<-"
SELECT ST_DWithin(
ST_GeomFromText('LINESTRING(1 2, 3 4)'),
ST_Point(3.00001, 4.000001),
0.0001
);
"
dbGetQuery(con,q)
#KNN operators: closest 10 centroids of geometry bounding boxes
q<-"
SELECT pid, geom<->ST_Transform(ST_SetSRID(ST_Point(-71.09368,42.35857),4326),26986) AS dist_centroid
FROM wk4.land
WHERE land_type='apartment'
ORDER BY geom<->ST_Transform(ST_SetSRID(ST_Point(-71.09368,42.35857),4326),26986)
LIMIT 10;
"
dbGetQuery(con,q) #both sides must have the same SRID
#KNN operators: closest shopping to each parcel
q<-"
SELECT
l.pid,
(
SELECT s.pid
FROM wk4.land AS s
WHERE s.land_type='shopping'
ORDER BY s.geom <-> l.geom LIMIT 1
) AS closest_shopping
FROM wk4.land AS l;
"
head(dbGetQuery(con,q))
#KNN operators: 3 closest shopping malls using a LATERAL join
q<-"
SELECT l.pid, r.pid AS n_closest_shopping
FROM wk4.land AS l
CROSS JOIN LATERAL
(
SELECT s.pid
FROM wk4.land as s
WHERE s.land_type='shopping'
ORDER BY s.geom <-> l.geom
LIMIT 3
) AS r;
"
head(dbGetQuery(con,q))
#use KNN operators with geography
q<-"
DROP INDEX IF EXISTS wk4.idx_airports_geom_gist_case;
CREATE INDEX idx_airports_geom_gist_case ON wk4.airports USING gist(geometry(geog));
With ref AS(
SELECT ST_Point(-82.3248,29.6516)::geography AS ref_geog
)
SELECT ident, name
FROM (
SELECT ident, name, geog
FROM wk4.airports
ORDER BY
(SELECT ref_geog::geometry FROM ref) <-> geog::geometry
LIMIT 20
) AS x
ORDER BY ST_Distance(geog,(SELECT ref_geog FROM ref))
LIMIT 5;
"
dbGetQuery(con,q)
#geotagging
#tagging data to a specific region: add time zone to airports
q<-"
ALTER TABLE wk4.airports ADD COLUMN tz varchar(30);
UPDATE wk4.airports
SET tz=t.tzid
FROM wk4.tz_world AS t
WHERE ST_Intersects(wk4.airports.geog, t.geog);
"
dbSendQuery(con,q)
q<-"
SELECT ident, name, CURRENT_TIMESTAMP AT TIME ZONE tz AS ts_at_airport
FROM wk4.airports
WHERE ident IN ('KBOS','KSAN','LIRF','OMDB','ZLXY');
"
dbGetQuery(con,q)
#linear referencing: snapping points to the closest linestring
q<-"
SELECT DISTINCT ON (p.pid)
p.addr_num || ' ' || full_str AS parcel,
r.road_name AS road,
ST_ClosestPoint(p.geom,r.geom) AS snapped_point
FROM wk4.land AS p
INNER JOIN wk4.road AS r ON ST_DWithin(p.geom,r.geom,20.0)
ORDER BY p.pid,ST_Distance(p.geom,r.geom);
"
head(dbGetQuery(con,q))
#spatial aggregation: cities with more than one record
q<-"
SELECT
city,
COUNT(city) AS num_records,
SUM(ST_NumGeometries(geom)) AS numpoly_before,
ST_NumGeometries(ST_Multi(ST_Union(geom))) as numpoly_after
FROM wk4.cities
GROUP BY city
HAVING COUNT(city)>1;
"
dbGetQuery(con,q)
#aggregate to one record per city
q<-"
SELECT city, ST_Multi(ST_Union(geom))::geometry(multipolygon,2227) AS geom
INTO wk4.distinct_cities
FROM wk4.cities
GROUP BY city, ST_SRID(geom);
ALTER TABLE wk4.distinct_cities
ADD CONSTRAINT pk_distinct_cities PRIMARY KEY (city);
CREATE INDEX idx_distinct_cities_geom ON wk4.distinct_cities USING gist(geom);
"
dbSendQuery(con,q) #create a new table, aggregate, cast, add primary key, and add a spatial index
#clipping
q<-"
SELECT
ST_Intersects(g1.geom1,g1.geom2) AS they_intersect,
GeometryType(ST_Difference(g1.geom1,g1.geom2)) AS intersect_geom_type
FROM (
SELECT ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') AS geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84,-0.8 0.59)') AS geom2
) AS g1;
"
dbGetQuery(con,q)
q<-"
SELECT
ST_Intersects(g1.geom1,g1.geom2) AS they_intersect,
GeometryType(ST_Difference(g1.geom2,g1.geom1)) AS intersect_geom_type
FROM (
SELECT ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') AS geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84,-0.8 0.59)') AS geom2
) AS g1;
"
dbGetQuery(con,q)
q<-"
SELECT
ST_Intersects(g1.geom1,g1.geom2) AS they_intersect,
GeometryType(ST_SymDifference(g1.geom1,g1.geom2)) AS intersect_geom_type
FROM (
SELECT ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') AS geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84,-0.8 0.59)') AS geom2
) AS g1;
"
dbGetQuery(con,q)
#Splitting
q<-"
SELECT (ST_Dump(ST_Split(g1.geom1,g1.geom2))).geom AS geom
FROM (
SELECT
ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') AS geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84,-0.8 0.59)') AS geom2
) AS g1;
"
dbGetQuery(con,q)
library(rpostgis)
library(RPostgreSQL)
library(sp) #provides classes and methods for spatial data
#Part 1
#create a connection
#save the password
pw <- "spr19"
#load the postgresql driver
drv<-dbDriver("PostgreSQL")
#create a connection to the postgres database
con<-dbConnect(drv,dbname="phc6194spr19db",host="localhost",user="phc6194",password=pw)
q<-"
DROP SCHEMA IF EXISTS wk3 CASCADE;
CREATE SCHEMA wk3;
"
dbSendQuery(con,q)
#points
q<-"
CREATE TABLE wk3.points (
id serial PRIMARY KEY,
p geometry(POINT),
pz geometry(POINTZ),
pm geometry(POINTM),
pzm geometry(POINTZM),
p_srid geometry(POINT,4269)
);
"
dbSendQuery(con,q) # unknown srid =0
q<-"
INSERT INTO wk3.points (p,pz,pm,pzm,p_srid)
VALUES (
ST_GeomFromText('POINT(1 -1)'),
ST_GeomFromText('POINT Z(1 -1 1)'),
ST_GeomFromText('POINT M(1 -1 1)'),
ST_GeomFromText('POINT ZM(1 -1 1 1)'),
ST_GeomFromText('POINT(1 -1)',4269)
);
"
dbSendQuery(con,q)
#retrieve spatial data from postgis, and plot it
p<-pgGetGeom(con,c("wk3","points"),geom="p",other.cols=F)
plot(p)
#linestrings
q<-"
CREATE TABLE wk3.linestrings(
id serial PRIMARY KEY,
name varchar(20),
ls geometry(LINESTRING)
);
INSERT INTO wk3.linestrings(name,ls)
VALUES
('Open',ST_GeomFromText('LINESTRING(0 0,1 1,1 -1)')),
('Closed',ST_GeomFromText('LINESTRING(0 0,1 1,1 -1,0 0)'));
"
dbSendQuery(con,q)
ls1<-pgGetGeom(con,c("wk3","linestrings"),geom="ls",other.cols=F,clauses ="WHERE name='Open'")
plot(ls1)
ls2<-pgGetGeom(con,c("wk3","linestrings"),geom="ls",other.cols=F,clauses ="WHERE name='Closed'")
plot(ls2)
#polygons
q<-"
CREATE TABLE wk3.polygons(
id serial PRIMARY KEY,
name varchar(20),
polygon geometry(POLYGON)
);
INSERT INTO wk3.polygons(name,polygon)
VALUES
('Triangle',ST_GeomFromText('POLYGON((0 0,1 1,1 -1,0 0))')),
('TwoHoles',ST_GeomFromText('POLYGON((-0.25 -1.25, -0.25 1.25, 2.5 1.25,2.5 -1.25,-0.25 -1.25),(2.25 0,1.25 1,1.25 -1,2.25 0),(1 -1,1 1,0 0,1 -1))'));
"
dbSendQuery(con,q)
polygon1<-pgGetGeom(con,c("wk3","polygons"),geom="polygon",other.cols=F,clauses ="WHERE name='Triangle'")
plot(polygon1,col='black')
polygon2<-pgGetGeom(con,c("wk3","polygons"),geom="polygon",other.cols=F,clauses ="WHERE name='TwoHoles'")
plot(polygon2,col='black')
#multipoints
q<-"
CREATE TABLE wk3.multipoints (
id serial PRIMARY KEY,
p geometry(MULTIPOINT),
pz geometry(MULTIPOINTZ),
pm geometry(MULTIPOINTM),
pzm geometry(MULTIPOINTZM)
);
INSERT INTO wk3.multipoints (p,pz,pm,pzm)
VALUES (
ST_GeomFromText('MULTIPOINT(1 -1,0 0,2 3)'),
ST_GeomFromText('MULTIPOINT Z(1 -1 1,0 0 0,2 3 1)'),
ST_GeomFromText('MULTIPOINT M(1 -1 1,0 0 1, 2 3 1)'),
ST_GeomFromText('MULTIPOINT ZM(1 -1 1 1, 0 0 1 2, 2 3 1 2)')
);
"
dbSendQuery(con,q)
#retrieve spatial data from postgis, and plot it
p<-pgGetGeom(con,c("wk3","multipoints"),geom="p",other.cols=F)
plot(p)
#multilinestring
q<-"
CREATE TABLE wk3.multilinestrings(
id serial PRIMARY KEY,
name varchar(20),
ls geometry(MULTILINESTRING)
);
INSERT INTO wk3.multilinestrings(name,ls)
VALUES
('1',ST_GeomFromText('MULTILINESTRING((0 0,0 1,1 1),(-1 1,-1 -1))'));
"
dbSendQuery(con,q)
ls<-pgGetGeom(con,c("wk3","multilinestrings"),geom="ls",other.cols=F)
plot(ls)
#multipolygon
q<-"
CREATE TABLE wk3.multipolygons(
id serial PRIMARY KEY,
name varchar(20),
polygon geometry(MULTIPOLYGON)
);
INSERT INTO wk3.multipolygons(name,polygon)
VALUES
('1',ST_GeomFromText('MULTIPOLYGON(((2.25 0,1.25 1,1.25 -1,2.25 0)),((1 -1,1 1,0 0,1 -1)))'));
"
dbSendQuery(con,q)
polygon<-pgGetGeom(con,c("wk3","multipolygons"),geom="polygon",other.cols=F)
plot(polygon,col='black')
#change the SRID of an existing geometry column
q<-"
ALTER TABLE wk3.multipolygons
ALTER COLUMN polygon TYPE geometry(MULTIPOLYGON,4326)
USING ST_SetSRID(polygon,4326)
"
dbSendQuery(con,q)
polygon<-pgGetGeom(con,c("wk3","multipolygons"),geom="polygon",other.cols=F)
plot(polygon,col='black')
#convert a geometry column to a geography column
q<-"
ALTER TABLE wk3.multipolygons
ALTER COLUMN polygon TYPE geography(MULTIPOLYGON,4326)
USING ST_Transform(polygon,4326)::geography;
"
dbSendQuery(con,q)
polygon<-pgGetGeom(con,c("wk3","multipolygons"),geom="polygon",other.cols=F)
plot(polygon,col='black')
#Use geography data type
q<-"
CREATE TABLE  wk3.geogs (
id serial PRIMARY KEY,
name varchar(20),
my_point geography(POINT)
);
INSERT INTO wk3.geogs (name,my_point)
VALUES
('Home',ST_GeogFromText('POINT(0 0)')),
('Pizza 1',ST_GeogFromText('POINT(1 1)')),
('Pizza 2',ST_GeogFromText('POINT(1 -1)'));
"
dbSendQuery(con,q)
#how far am I from pizza
q<-"
SELECT h.name AS house, p.name AS pizza, ST_Distance(h.my_point,p.my_point) AS dist
FROM
(SELECT name, my_point FROM wk3.geogs WHERE name='Home') AS h
CROSS JOIN
(SELECT name, my_point FROM wk3.geogs WHERE name LIKE 'Pizza%') AS P
;
"
dbGetQuery(con,q)
